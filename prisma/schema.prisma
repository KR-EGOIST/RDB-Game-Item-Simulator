// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  userId        Int       @id @default(autoincrement()) @map("user_id")
  name          String    @map("name")
  id            String    @unique @map("id")
  password      String    @map("password")
  
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  character     Characters[]

  @@map("Users")
}

model Characters {
  characterId   Int         @id @default(autoincrement()) @map("character_id")
  UserId        Int         @map("user_id")
  name          String      @unique @map("name")
  health        Int         @default(500) @map("health")
  power         Int         @default(100) @map("power")
  money         Int         @default(10000) @map("money")

  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")

  user          Users       @relation(fields: [UserId], references: [userId], onDelete: Cascade)
  inventory     Inventorys?
  equip         Equips?

  @@map("Characters")
}

model Inventorys {
  inventoryId   Int         @id @default(autoincrement()) @map("inventory_id")
  CharacterId   Int         @unique @map("character_id")

  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")

  character     Characters  @relation(fields: [CharacterId], references: [characterId], onDelete: Cascade)
  item          Items[]

  @@map("Inventorys")
}

model Equips {
  equipId       Int         @id @default(autoincrement()) @map("equip_id")
  CharacterId   Int         @unique @map("character_id")

  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")

  character     Characters  @relation(fields: [CharacterId], references: [characterId], onDelete: Cascade)
  item          Items[]

  @@map("Equips")
}

model Items {
  itemCode      Int         @id @default(autoincrement()) @map("item_code")
  InventoryId   Int         @map("inventory_id")
  EquipId       Int         @map("equip_id")
  itemName      String      @map("item_name")
  itemPrice     Int         @map("item_price")

  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")

  inventory     Inventorys  @relation(fields: [InventoryId], references: [inventoryId], onDelete: Cascade)
  equip         Equips      @relation(fields: [EquipId], references: [equipId], onDelete: Cascade)
  itemStat      ItemStats?

  @@map("Items")
}

model ItemStats {
  itemStatId    Int         @id @default(autoincrement()) @map("item_stat_id")
  ItemCode      Int         @unique @map("item_code")
  health        Int?        @map("health")
  power         Int?        @map("power")

  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")

  item          Items       @relation(fields: [ItemCode], references: [itemCode], onDelete: Cascade)

  @@map("ItemStats")
}